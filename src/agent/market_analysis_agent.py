from datetime import datetime
from dotenv import load_dotenv
from agents import Agent, Runner, trace
from liquidity_agent import LiquidityTrendAgent
from equity_agent import EquityTrendAgent

load_dotenv(override=True)



instructions = f"""
You are a comprehensive market analyst providing integrated analysis by examining both liquidity conditions and equity trends.

You will receive two analysis results:
1. Liquidity analysis from treasury yield trends (TNX, FVX, etc.)
2. Equity analysis from stock price trends (AAPL, SPY, TSLA, etc.)

YOUR TASK:

1. CORRELATION ANALYSIS:
   - Compare liquidity trends with equity performance
   - Identify alignment or divergence between the two
   - Assess if equity movements are supported by liquidity conditions

2. INTEGRATED INSIGHTS:
   - Rising yields + Rising stock = Strong fundamentals overcoming tightening liquidity
   - Falling yields + Rising stock = Ideal bullish environment (loosening liquidity boost)
   - Rising yields + Falling stock = Liquidity headwinds pressuring equities
   - Falling yields + Falling stock = Risk-off despite supportive liquidity (fundamental concerns)

3. TIMEFRAME-SPECIFIC ANALYSIS:
   - Short-term (5 days): Immediate momentum and trend alignment
   - Medium-term (1 month): Trend confirmation and divergences
   - Long-term (6 months): Structural trends and strategic positioning

4. ACTIONABLE RECOMMENDATIONS:
   - Investment outlook based on integrated analysis
   - Key risks from liquidity or equity side
   - Monitoring points and potential catalysts
   - Entry/exit timing considerations

KEY ANALYSIS POINTS:
- How liquidity conditions support or hinder equity performance
- Whether current equity valuation is justified given liquidity backdrop
- Divergences between liquidity and equity trends (opportunities or warnings)
- Risk appetite indicators from both markets
- Integer percentage level crossings and their significance

CRITICAL RULES:
- NEVER try to create or output images directly
- DO NOT use markdown image syntax
- Charts are already generated by sub-agents

Today is {datetime.now().strftime("%Y-%m-%d")}.
Always explain in Korean and provide comprehensive, actionable market insights.
"""
        
# Use agent-as-tools pattern
agent = Agent(
    name="analyzer_agent",
    instructions=instructions,
    model="gpt-4o"
)


# Usage examples
if __name__ == "__main__":
    import asyncio
    
    # Create sub-agents
    liquidity_agent = LiquidityTrendAgent("^TNX")
    equity_agent = EquityTrendAgent("AAPL")
    
    async def main():
        with trace("market_analysis_agent"):
            results = await asyncio.gather(
                liquidity_agent.run("Analyze TNX trends for 5d, 1mo, 6mo periods with charts"),
                equity_agent.run("Analyze AAPL trends for 5d, 1mo, 6mo periods with charts")
            )
            
            # Extract final outputs from RunResult objects
            liquidity_output = results[0].final_output
            equity_output = results[1].final_output
            
            # Combine for analysis
            combined_input = f"""
            === Liquidity Analysis ===
            {liquidity_output}

            === Equity Analysis ===
            {equity_output}
            """

            analyzer = await Runner.run(agent, input=combined_input)
            print(analyzer.final_output)
        
    asyncio.run(main())
